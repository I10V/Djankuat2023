hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>%
summarise(
ssl_mean = mean(ssl, na.rm = T),
ssl_sd = sd(ssl, na.rm = T),
ssl_mad = mad(ssl, center = mean(ssl, na.rm = T), na.rm = T)
)
# Annual SSL
Sys.setlocale("LC_TIME", "English")
ssl_table <-
hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>% # t/event
drop_na(ssl) %>%
dplyr::mutate_if(is.numeric, list(~signif(., 2))) %>%
group_by(year = year(start)) %>%
filter(year >= 2015) %>%
summarise(n = sum(!is.na(ssl)),
begin = format(min(as.Date(start)), "%d %b"),
finish = format(max(as.Date(end)), "%d %b"),
range = paste0(begin, " - ", finish),
SSL_period = sum(ssl, na.rm = T),
Mean = mean(ssl, na.rm = T),
SD = sd(ssl, na.rm = T),
Median = median(ssl, na.rm = T),
Max = max(ssl, na.rm = T),
Min = min(ssl, na.rm = T)) %>%
dplyr::select(-begin, -finish)
# SSL AEP -----------------------------------------------------------------
ssl_pm <-
hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>%
group_by(year) %>%
arrange(-ssl, .by_group = T) %>%
mutate(id = row_number()) %>%
ungroup() %>%
filter(year %in% c(2015:2021)) %>%
filter(id %in% 1:5) %>%
arrange(-ssl) %>%
filter(ssl != max(ssl)) %>%
transmute(
he,
Measure = "SSL",
Value = ssl,
Pm = row_number()/(n() + 1)
)
ssl_aep <-
compute_frequency_analysis(
data = ssl_pm,
events = he,
use_max = T,
fit_distr = "PIII",
# fit_distr_method = "MLE",
fit_quantiles = seq(0.001, 0.999, by = 0.01),
values = Value
)
ssl_aep$Freq_Fitted_Quantiles %>%
print(n = 100)
# plot ssl aep ------------------------------------------------------------
probs <- c(0.001, 0.01,
0.1, 0.3, 0.5, 0.7,
0.9, 0.99, 0.999)
ssl_aep_plot <-
ssl_aep$Freq_Fitted_Quantiles %>%
dplyr::select(-1) %>%
gather(Measure, p, -Probability, -`Return Period`) %>%
ggplot() +
geom_line(aes(x = qnorm(Probability),
y = p,
color = Measure),
show.legend = F) +
geom_point(data = ssl_pm,
alpha = .6,
aes(x = qnorm(Pm), y = Value, color = Measure),
show.legend = F) +
scale_y_continuous(name = "Max. SSL, t/event",
breaks = seq(0, 10^5, 1000),
labels = scales::comma,
expand = c(.05, .05)) +
scale_x_continuous(name = "Annual exceedance probability, %",
breaks = qnorm(probs),
labels = str_c(probs * 100,'%'),
expand = c(.001, .001),
sec.axis = dup_axis(name = 'Return period, yr',
labels = round(1/probs, 2))) +
theme_pilot(axes = "blt", grid = "hv")
# extreme events ----------------------------------------------------------
extreme_events <-
hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>%
filter(ssl > 950) %>%
arrange(-ssl) %>%
dplyr::select(
year:end,
length:ssc.mean,
ssl,
mean_date
)
p_cumsum <-
day_2007_2022 %>%
mutate(p3 = zoo::rollsum(rain_mm,
3,
fill = 0,
align = "right"),
p7 = zoo::rollsum(rain_mm,
7,
fill = 0,
align = "right"),
p15 = zoo::rollsum(rain_mm,
18,
fill = 0,
align = "right")-p3) %>%
mutate(across(c(p3:p15), ~na_if(.x, 0)))
p_model <-
p_cumsum %>%
filter(
# date %in% as.Date(extreme_events$mean_date) |
p15 > 50 & p3 > 100 |
date %in% as.Date(c("2019-07-25", "2019-07-26", "2019-07-27", "2015-07-03")),
) %>%
drop_na() %>%
lm(p3 ~ p15, data = .)
p_predict <-
tibble(p3 = c(0, 150),
p15 = c(0, 250)) %>%
mutate(p3_m = predict.lm(p_model, .))
# mutate(p3_m = 150 - 0.6 * p15)
p_manual <-
tibble(p3 = c(0, 150),
p15 = c(50, 220)) %>%
# mutate(p3_m = predict.lm(p_model, .))
mutate(p3_m = 235 - 0.9842 * p15)
cumsum_plot <-
p_cumsum %>%
mutate(
my_color = case_when(
date %in% as.Date(extreme_events$mean_date) ~ "firebrick4",
TRUE ~ "grey80"
),
my_label = case_when(
date %in% as.Date(extreme_events$mean_date) ~ format(date,
"%d %b %y"),
TRUE ~ ""
),
grey_label = case_when(
!date %in% as.Date(extreme_events$mean_date) &
p3 > 100 ~ format(date, "%d %b %y"),
date %in% as.Date(c("2019-07-25", "2019-07-26", "2019-07-27", "2015-07-03")) ~ format(date, "%d %b %y"),
TRUE ~ ""
),
my_alpha = ifelse(my_color == "grey70", 0.35, 1)
) %>%
ggplot(aes(x = p15, y = p3)) +
geom_line(
data = p_manual,
aes(x = p15, y = p3_m),
linetype = "dashed"
) +
annotate(
"text",
x = 100, y = 180,
label = expression(italic("P"[3]*"= 235 - 0.98×P"[15]))
) +
geom_point(aes(color = my_color, alpha = my_alpha)) +
ggrepel::geom_text_repel(aes(label = my_label)) +
ggrepel::geom_text_repel(aes(label = grey_label),
color = "black",
size = 2.5) +
scale_color_identity() +
scale_alpha_identity()+
labs(
x = expression(
"P"[15]*", 15-day cumulative precipitation prior to P"[3]*", mm",
),
y =  expression("P"[3]*", 3-day cumulative precipitation, mm")
) +
scale_x_continuous(breaks = seq(0, 300, by = 50)) +
pilot::theme_pilot(axes = "bl")
# save --------------------------------------------------------------------
# SSL overview
ssl_table %>%
mutate(across(where(is.numeric), ~smart_round(.x))) %>%
writexl::write_xlsx("R/05_Hydro-Meteo-analysis/tables/annual_ssl.xlsx")
# libraries ---------------------------------------------------------------
#devtools::install_github("atsyplenkov/atslib")
#devtools::install_github("atsyplenkov/loadflux")
#remotes::install_github("olihawkins/pilot")
library(tidyverse)
library(lubridate)
library(atslib)
library(loadflux)
library(qs)
library(pilot)
library(fasstr)
set_pilot_family("Noto Sans")
theme_set(
pilot::theme_pilot(axes = "bl", grid = "h")
)
# load data ---------------------------------------------------------------
hydro_2007_2022 <-
qread("hydro_2007-2022_2023-04-21.qs") %>%
filter(!year %in% c(2011, 2012))
day_2007_2022 <-
qread("aws_daily_2008-2022_2023-04-20.qs")
# hydrological events -----------------------------------------------------
hydro_he <-
hydro_2007_2022 %>%
arrange(datetime) %>%
group_by(year) %>%
mutate(q_real = q,
q = zoo::na.approx(q, rule = 2, maxgap = 20)) %>%
drop_na(q) %>%
nest()  %>%
mutate(data = ifelse(!year %in% c(2019, 2021),
map(data, ~hydro_events(.x, q, datetime, 9)),
map(data, ~hydro_events(.x, q, datetime, 15)))) %>%
unnest(data) %>%
ungroup() %>%
mutate(he = glue::glue("{year}_{as.character(he)}"),
he = as_factor(he),
q = q_real) %>%
dplyr::select(-q_real)
hydro_he %>%
filter(year == 2020) %>%
# mutate(ssc = log10(ssc)) %>%
event_plot(q = q, datetime = datetime, he = he, ssc = ssc)
# hydrological event database ---------------------------------------------
hydro_he_db <-
hydro_he %>%
mutate(r = ssc * q) %>%
group_by(he) %>%
summarise(year = year(first(datetime)),
start = first(datetime),
end = last(datetime),
mean_date = mean.POSIXct(c(start, end)),
length = as.double(difftime(end, start, units = "hours")), # hours
q.mean = mean(q, na.rm = T), # m^3/s
q.max = max(q, na.rm = T), # m^3/s
ssc.mean = mean(ssc, na.rm = T), # g/m^3
# r = q.mean * ssc.mean /10^3,
r = mean(r, na.rm = T),
.groups = "drop") %>%  # kg/s
mutate(across(everything(), ~replace(.x, is.nan(.x), NA))) %>%
arrange(start)
hydro_he_db %>%
filter(year >= 2015) %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>%
ggplot(aes(x = mean_date,
y = ssl)) +
geom_point() +
scale_y_log10() +
facet_wrap(~year,
scales = "free_x")
# Summary stats -----------------------------------------------------------
# Total hydrological events
hydro_he_db %>%
group_by(year) %>%
count() %>%
summary()
# Mean SSL
hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>%
summarise(
ssl_mean = mean(ssl, na.rm = T),
ssl_sd = sd(ssl, na.rm = T),
ssl_mad = mad(ssl, center = mean(ssl, na.rm = T), na.rm = T)
)
# Annual SSL
Sys.setlocale("LC_TIME", "English")
ssl_table <-
hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>% # t/event
drop_na(ssl) %>%
dplyr::mutate_if(is.numeric, list(~signif(., 2))) %>%
group_by(year = year(start)) %>%
filter(year >= 2015) %>%
summarise(n = sum(!is.na(ssl)),
begin = format(min(as.Date(start)), "%d %b"),
finish = format(max(as.Date(end)), "%d %b"),
range = paste0(begin, " - ", finish),
SSL_period = sum(ssl, na.rm = T),
Mean = mean(ssl, na.rm = T),
SD = sd(ssl, na.rm = T),
Median = median(ssl, na.rm = T),
Max = max(ssl, na.rm = T),
Min = min(ssl, na.rm = T)) %>%
dplyr::select(-begin, -finish)
# SSL AEP -----------------------------------------------------------------
ssl_pm <-
hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>%
group_by(year) %>%
arrange(-ssl, .by_group = T) %>%
mutate(id = row_number()) %>%
ungroup() %>%
filter(year %in% c(2015:2021)) %>%
filter(id %in% 1:5) %>%
arrange(-ssl) %>%
filter(ssl != max(ssl)) %>%
transmute(
he,
Measure = "SSL",
Value = ssl,
Pm = row_number()/(n() + 1)
)
ssl_aep <-
compute_frequency_analysis(
data = ssl_pm,
events = he,
use_max = T,
fit_distr = "PIII",
# fit_distr_method = "MLE",
fit_quantiles = seq(0.001, 0.999, by = 0.01),
values = Value
)
ssl_aep$Freq_Fitted_Quantiles %>%
print(n = 100)
# plot ssl aep ------------------------------------------------------------
probs <- c(0.001, 0.01,
0.1, 0.3, 0.5, 0.7,
0.9, 0.99, 0.999)
ssl_aep_plot <-
ssl_aep$Freq_Fitted_Quantiles %>%
dplyr::select(-1) %>%
gather(Measure, p, -Probability, -`Return Period`) %>%
ggplot() +
geom_line(aes(x = qnorm(Probability),
y = p,
color = Measure),
show.legend = F) +
geom_point(data = ssl_pm,
alpha = .6,
aes(x = qnorm(Pm), y = Value, color = Measure),
show.legend = F) +
scale_y_continuous(name = "Max. SSL, t/event",
breaks = seq(0, 10^5, 1000),
labels = scales::comma,
expand = c(.05, .05)) +
scale_x_continuous(name = "Annual exceedance probability, %",
breaks = qnorm(probs),
labels = str_c(probs * 100,'%'),
expand = c(.001, .001),
sec.axis = dup_axis(name = 'Return period, yr',
labels = round(1/probs, 2))) +
theme_pilot(axes = "blt", grid = "hv")
# extreme events ----------------------------------------------------------
extreme_events <-
hydro_he_db %>%
mutate(ssl = round((r * 3600 * length / 10^6), 2)) %>%
filter(ssl > 950) %>%
arrange(-ssl) %>%
dplyr::select(
year:end,
length:ssc.mean,
ssl,
mean_date
)
p_cumsum <-
day_2007_2022 %>%
mutate(p3 = zoo::rollsum(rain_mm,
3,
fill = 0,
align = "right"),
p7 = zoo::rollsum(rain_mm,
7,
fill = 0,
align = "right"),
p15 = zoo::rollsum(rain_mm,
18,
fill = 0,
align = "right")-p3) %>%
mutate(across(c(p3:p15), ~na_if(.x, 0)))
p_model <-
p_cumsum %>%
filter(
# date %in% as.Date(extreme_events$mean_date) |
p15 > 50 & p3 > 100 |
date %in% as.Date(c("2019-07-25", "2019-07-26", "2019-07-27", "2015-07-03")),
) %>%
drop_na() %>%
lm(p3 ~ p15, data = .)
p_predict <-
tibble(p3 = c(0, 150),
p15 = c(0, 250)) %>%
mutate(p3_m = predict.lm(p_model, .))
# mutate(p3_m = 150 - 0.6 * p15)
p_manual <-
tibble(p3 = c(0, 150),
p15 = c(50, 220)) %>%
# mutate(p3_m = predict.lm(p_model, .))
mutate(p3_m = 235 - 0.9842 * p15)
cumsum_plot <-
p_cumsum %>%
mutate(
my_color = case_when(
date %in% as.Date(extreme_events$mean_date) ~ "firebrick4",
TRUE ~ "grey80"
),
my_label = case_when(
date %in% as.Date(extreme_events$mean_date) ~ format(date,
"%d %b %y"),
TRUE ~ ""
),
grey_label = case_when(
!date %in% as.Date(extreme_events$mean_date) &
p3 > 100 ~ format(date, "%d %b %y"),
date %in% as.Date(c("2019-07-25", "2019-07-26", "2019-07-27", "2015-07-03")) ~ format(date, "%d %b %y"),
TRUE ~ ""
),
my_alpha = ifelse(my_color == "grey70", 0.35, 1)
) %>%
ggplot(aes(x = p15, y = p3)) +
geom_line(
data = p_manual,
aes(x = p15, y = p3_m),
linetype = "dashed"
) +
annotate(
"text",
x = 100, y = 180,
label = expression(italic("P"[3]*"= 235 - 0.98×P"[15]))
) +
geom_point(aes(color = my_color, alpha = my_alpha)) +
ggrepel::geom_text_repel(aes(label = my_label)) +
ggrepel::geom_text_repel(aes(label = grey_label),
color = "black",
size = 2.5) +
scale_color_identity() +
scale_alpha_identity()+
labs(
x = expression(
"P"[15]*", 15-day cumulative precipitation prior to P"[3]*", mm",
),
y =  expression("P"[3]*", 3-day cumulative precipitation, mm")
) +
scale_x_continuous(breaks = seq(0, 300, by = 50)) +
pilot::theme_pilot(axes = "bl")
# save --------------------------------------------------------------------
# SSL overview
ssl_table %>%
mutate(across(where(is.numeric), ~smart_round(.x))) %>%
writexl::write_xlsx("annual_ssl.xlsx")
# Top extreme events
extreme_events %>%
mutate(across(where(is.numeric), ~smart_round(.x))) %>%
mutate(across(where(is.POSIXct), ~as.character(.x))) %>%
writexl::write_xlsx("top_events.xlsx")
# Plot
ggsave(
ssl_aep_plot,
filename = "ssl_aep.tiff",
device = ragg::agg_png,
dpi = 1000,
width = 16,
height = 9,
units = "cm"
)
ggsave(
cumsum_plot,
filename = "cumsum_plot.tiff",
device = ragg::agg_png,
dpi = 1000,
width = 16,
height = 10,
units = "cm"
)
library(imputeTS)
library(clock)
library(see)
theme_set(theme_lucid() +
theme(legend.position = "bottom"))
djan_bed16 <- read_xlsx("D:/work/Отчет по Джанкуату 2023/Влекомые наносы, кавказ гидормет/влекомые наносы Толя/sediments_2015_2017.xlsx",
sheet = "vlekomye2016") %>%
dplyr::select(datetime = 2,
bedload = 9) %>%
mutate(datetime = force_tz(datetime, "Europe/Moscow")) %>%
drop_na(datetime) %>%
mutate(datetime = round_date(datetime,
unit = "hour"))
library(readxl)
library(imputeTS)
library(clock)
library(see)
library(readxl)
theme_set(theme_lucid() +
theme(legend.position = "bottom"))
djan_bed16 <- read_xlsx("D:/work/Отчет по Джанкуату 2023/Влекомые наносы, кавказ гидормет/влекомые наносы Толя/sediments_2015_2017.xlsx",
sheet = "vlekomye2016") %>%
dplyr::select(datetime = 2,
bedload = 9) %>%
mutate(datetime = force_tz(datetime, "Europe/Moscow")) %>%
drop_na(datetime) %>%
mutate(datetime = round_date(datetime,
unit = "hour"))
djan_bed17 <- read_xlsx("D:/work/Отчет по Джанкуату 2023/Влекомые наносы, кавказ гидормет/влекомые наносы Толя/sediments_2015_2017.xlsx",
sheet = "vlekomye2017") %>%
dplyr::select(datetime = 4,
bedload = 26) %>%
mutate(datetime = force_tz(datetime, "Europe/Moscow")) %>%
drop_na(datetime) %>%
mutate(datetime = round_date(datetime,
unit = "hour"))
djan_sed_all <- djan_hydro %>%
mutate(ssd = ssc * q) %>%
mutate(ssd = imputeTS::na_interpolation(ssd)) %>%
right_join(
bind_rows(djan_bed16,
djan_bed17),
by = "datetime"
) %>%
transmute(datetime,
ssd,
bsd = bedload*1000/60)
